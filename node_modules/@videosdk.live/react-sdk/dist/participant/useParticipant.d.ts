export default useParticipant;
/**
 *
 * @param {string} participantId
 * @param {{
 *  onStreamDisabled?: Function,
 *  onStreamEnabled?: Function,
 *  onMediaStatusChanged?: Function,
 * }} options
 *
 * @returns {{
 *   displayName: string;
 *   participant: Participant;
 *   webcamStream: MediaStreamTrack;
 *   micStream: MediaStreamTrack;
 *   screenShareStream: MediaStreamTrack;
 *   webcamOn: boolean;
 *   micOn: boolean;
 *   screenShareOn: boolean;
 *   isLocal: boolean;
 *   isActiveSpeaker: boolean;
 *   isMainParticipant: boolean;
 *   pinState: any;
 *   consumeMicStreams: () => void;
 *   consumeWebcamStreams: () => void;
 *   stopConsumingMicStreams: () => void;
 *   stopConsumingWebcamStreams: () => void;
 *   setQuality: (quality: "low" | "med" | 'high') => void;
 *   setViewPort: (width: number, height: number) => void;
 *   enableMic: () => void;
 *   disableMic: () => void;
 *   enableWebcam: () => void;
 *   disableWebcam: () => void;
 *   pin: (data: "SHARE_AND_CAM" | "CAM" | "SHARE") => void;
 *   unpin: (data: "SHARE_AND_CAM" | "CAM" | "SHARE") => void;
 *   switchTo: ({ meetingId, payload, token }: {
 *      meetingId: string;
 *      payload: string;
 *      token: string;
 *   }) => Promise<void>;
 *   getAudioStats: () => Promise<{
 *     bitrate: any;
 *     score: any;
 *     roundTripTime: any;
 *     jitter: any;
 *     totalPacketCount: any;
 *     totalPacketsLost: any;
 *   }>;
 *   getVideoStats: () => Promise<{
 *     bitrate: any;
 *     score: any;
 *     roundTripTime: any;
 *     jitter: any;
 *     totalPacketCount: any;
 *     totalPacketsLost: any;
 *   }>;
 *}}
 *
 */
declare function useParticipant(participantId: string, { onStreamEnabled, onStreamDisabled, onMediaStatusChanged }?: {
    onStreamDisabled?: Function;
    onStreamEnabled?: Function;
    onMediaStatusChanged?: Function;
}): {
    displayName: string;
    participant: Participant;
    webcamStream: MediaStreamTrack;
    micStream: MediaStreamTrack;
    screenShareStream: MediaStreamTrack;
    webcamOn: boolean;
    micOn: boolean;
    screenShareOn: boolean;
    isLocal: boolean;
    isActiveSpeaker: boolean;
    isMainParticipant: boolean;
    pinState: any;
    consumeMicStreams: () => void;
    consumeWebcamStreams: () => void;
    stopConsumingMicStreams: () => void;
    stopConsumingWebcamStreams: () => void;
    setQuality: (quality: "low" | "med" | 'high') => void;
    setViewPort: (width: number, height: number) => void;
    enableMic: () => void;
    disableMic: () => void;
    enableWebcam: () => void;
    disableWebcam: () => void;
    pin: (data: "SHARE_AND_CAM" | "CAM" | "SHARE") => void;
    unpin: (data: "SHARE_AND_CAM" | "CAM" | "SHARE") => void;
    switchTo: ({ meetingId, payload, token }: {
        meetingId: string;
        payload: string;
        token: string;
    }) => Promise<void>;
    getAudioStats: () => Promise<{
        bitrate: any;
        score: any;
        roundTripTime: any;
        jitter: any;
        totalPacketCount: any;
        totalPacketsLost: any;
    }>;
    getVideoStats: () => Promise<{
        bitrate: any;
        score: any;
        roundTripTime: any;
        jitter: any;
        totalPacketCount: any;
        totalPacketsLost: any;
    }>;
};
//# sourceMappingURL=useParticipant.d.ts.map